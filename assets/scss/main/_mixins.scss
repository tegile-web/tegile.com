/******************************************************************

Stylesheet: Mixins & Constants Stylesheet

This is where you can take advantage of Sass' great features:
Mixins & Constants. I won't go in-depth on how they work exactly,
there are a few articles below that will help do that. What I will
tell you is that this will help speed up simple changes like
changing a color or adding CSS3 techniques gradients.

A WORD OF WARNING: It's very easy to overdo it here. Be careful and
remember less is more.

******************************************************************/

/*****************************
 *  Fluid Typography Mixins  *
*****************************/

// Fluid Type Mixin

@function strip-unit($value) {
  @return $value / ($value * 0 + 1);
}

@mixin fluid-type($min-vw, $max-vw, $min-font-size, $max-font-size, $props: font-size) {
  $u1: unit($min-vw);
  $u2: unit($max-vw);
  $u3: unit($min-font-size);
  $u4: unit($max-font-size);

  @if $u1 == $u2 and $u1 == $u3 and $u1 == $u4 {
    & {
        @each $prop in $props {
            #{$prop}: $min-font-size;
        }
        @media screen and (min-width: $min-vw) {
            @each $prop in $props {
                #{$prop}: calc(#{$min-font-size} + #{strip-unit($max-font-size - $min-font-size)} * ((100vw - #{$min-vw}) / #{strip-unit($max-vw - $min-vw)}));
            }
        }

        @media screen and (min-width: $max-vw) {
            @each $prop in $props {
                #{$prop}: $max-font-size;
            }
        }
    }
  } @else {
    @error "Detected mixed units. Please use the same units for all parameters. " + $u1 +", " + $u2 + ", " + $u3 +", "+ $u4;
  }
}

/*********************************
 *  End Fluid Typography Mixins  *
*********************************/


/*********************
TOOLS
*********************/

// http://www.zeldman.com/2012/03/01/replacing-the-9999px-hack-new-image-replacement/
.image-replacement {
	text-indent: 100%;
	white-space: nowrap;
	overflow: hidden;
}


/*********************
COLORS
Need help w/ choosing your colors? Try this site out:
http://0to255.com/
*********************/


/*********************
TYPOGRAPHY
*********************/

/* 	To embed your own fonts, use this syntax
	and place your fonts inside the
	assets/fonts folder. For more information
	on embedding fonts, go to:
	http://www.fontsquirrel.com/
	Be sure to remove the comment brackets.
*/

/*	@font-face {
    	font-family: 'Font Name';
    	src: url('assets/fonts/font-name.eot');
    	src: url('assets/fonts/font-name.eot?#iefix') format('embedded-opentype'),
             url('assets/fonts/font-name.woff') format('woff'),
             url('assets/fonts/font-name.ttf') format('truetype'),
             url('assets/fonts/font-name.svg#font-name') format('svg');
    	font-weight: normal;
    	font-style: normal;
	}
*/

/*
use the best ampersand
http://simplebits.com/notebook/2008/08/14/ampersands-2/
*/
span.amp {
  font-family: Baskerville,'Goudy Old Style',Palatino,'Book Antiqua',serif !important;
  font-style: italic;
}

/*********************
TRANSITION
*********************/

/*
I totally rewrote this to be cleaner and easier to use.
You'll need to be using Sass 3.2+ for these to work.
Thanks to @anthonyshort for the inspiration on these.
USAGE: @include transition(all 0.2s ease-in-out);
*/

@mixin transition($transition...) {
	// defining prefixes so we can use them in mixins below
	$prefixes:      ("-webkit", "-ms", "-o",  "");
  @each $prefix in $prefixes {
    #{$prefix}-transition: $transition;
  }

  transition: $transition;
}

/*********************
CSS3 GRADIENTS
Be careful with these since they can
really slow down your CSS. Don't overdo it.
*********************/

/* @include css-gradient(#dfdfdf,#f8f8f8); */
@mixin css-gradient($from: #dfdfdf, $to: #f8f8f8) {
	background-color: $to;
	background-image: -webkit-gradient(linear, left top, left bottom, from($from), to($to));
	background-image: -webkit-linear-gradient(top, $from, $to);
	background-image: -moz-linear-gradient(top, $from, $to);
	background-image: -o-linear-gradient(top, $from, $to);
	background-image: linear-gradient(to bottom, $from, $to);
}

/*********************
Equidistant Mixin
Simple mixin to set all 4 points of an element to the same value (useful for 0,0,0,0)
*********************/
@mixin equidistant($distance) {
    top: $distance;
    bottom: $distance;
    left: $distance;
    right: $distance;
}

/*********************
Sizing & Positioning Mixins
A set of mixins used to create offset css styles for size and position of elements
*********************/

@mixin push-pull() {
    
    $sizes: 1 2 3 4 5 6 8 10 12 15 20;

    @each $size in $sizes {

        .push-left-#{$size} {
            margin-right: ($size) * 1rem !important;
            @media #{$small-screen} {
              margin-right: inherit !important;
            }
        }

        .push-right-#{$size} {
            margin-left: ($size) * 1rem !important;
            @media #{$small-screen} {
              margin-left: inherit !important;
            }
        }

        .pull-left-#{$size} {
            margin-left: ($size) * -1rem !important;
            @media #{$small-screen} {
              margin-left: inherit !important;
            }
        }

        .pull-right-#{$size} {
            margin-right: ($size) * -1rem !important;
            @media #{$small-screen} {
              margin-right: inherit !important;
            }
        }
    }
}

@include push-pull();